import logging
import json
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile

import markups as nav
from db import Database
from binance.um_futures import UMFutures
from my_binance import balance_binance

from binance.error import ClientError
tg_chanel_user = 871610428
admin = [871610428]

users = [871610428, 634713845, -1001877258339]

def set_user_js(user_id):
    with open('data2.txt') as json_file:
        data = json.load(json_file)
        user =[]
        for i in data:

            user.append(i['user_id'])

        if str(user_id) in user:
            print('—Ç–∞–∫–æ–π —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å')

        else:
            data.append({
            'user_id':str(user_id),
            'position_1m':'',
            'position_5m':'',
            'position_15m':'',
            'position_30m':'',
            'position_1h':'',
            'position_4h':'',
            'close':'',

            })
        with open('data2.txt', 'w') as outfile:

            json.dump(data, outfile)

def set_position_js(user_id, position, enter ):
    with open('data2.txt') as json_file:
        data = json.load(json_file)
        for i in data:
            if str(user_id) == i['user_id']:
                i[position] = enter

    with open('data2.txt', 'w') as outfile:

        json.dump(data, outfile)

def del_user_js(user_id):
    with open('data2.txt') as json_file:
        data = json.load(json_file)
        for i in data:
            if str(user_id) == i['user_id']:
                data.pop(data.index(i))
    with open('data2.txt', 'w') as outfile:

        json.dump(data, outfile)




TOKEN = '5202575933:AAF-q7yxh_EyQBqsYtiuIViIFUHh27SFY0A'
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')

@dp.message_handler(commands=['rus'])
async def start(message: types.Message):
    db.set_language(message.from_user.id, 'ru')
    await bot.send_message(message.from_user.id, '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π\n–ù–∞–∂–º–∏ /start')

@dp.message_handler(commands=['eng'])
async def start(message: types.Message):
    db.set_language(message.from_user.id, 'eng')
    await bot.send_message(message.from_user.id, 'Language changed to English\nClick /start')
@dp.message_handler(lambda message: message.chat.id in admin, commands=['admin'])
async def start(message: types.Message):
    all_user = db.get_all()
    text = ''
    for i in all_user:
        text +=f'id {i[1]} –ù–ò–ö {i[2]} –ü–æ–¥–ø–∏—Å–∫–∞{i[5]} leng {i[14]} balance {i[23]}\n\n'

    await bot.send_message(message.from_user.id, text)



@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    if(not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
        await bot.send_message(871610428, f'–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª {message.from_user.id}')
        if message.from_user.locale.language == 'ru':
            db.set_language(message.from_user.id, 'ru')
            await bot.send_message(message.from_user.id, '–í–∞—à —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ –†—É—Å—Å–∫–∏–π –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')


        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, 'Enter your nickname:')
        else:
            await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫:')
    else:
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, 'Main menu!', reply_markup=nav.eng_mainMenu)
        else:
            await bot.send_message(message.from_user.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=nav.mainMenu)

@dp.message_handler()
async def bot_masege(message: types.Message):
    if message.chat.type == 'private':
        if message.text == 'üëΩ –ü—Ä–æ—Ñ–∏–ª—å' or  message.text == 'üëΩ Profile':
            await bot.send_message(message.from_user.id, 'üëΩÔ∏è')
            if db.get_api_key(message.from_user.id) != None and db.get_secret_key(message.from_user.id) != None:
                binance_api = 'Yes'
            else:
                binance_api = 'No'
            nicname = db.get_nickname(message.from_user.id)
            timeSub = db.get_time_sub(message.from_user.id)
            subscription = db.get_subscription(message.from_user.id)
            wallet = db.get_wallet(message.from_user.id)

            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id,
                                       f'User_id: {message.from_user.id}\nNickname: {nicname}\nWallet {wallet}\nYour subscription: {subscription}\nBinance_api: {binance_api}\nLeft: {timeSub} days')

            else:
                await bot.send_message(message.from_user.id,
                                       f'User_id: {message.from_user.id}\n–ù–∏–∫: {nicname}\n–ö–æ—à–µ–ª–µ–∫ {wallet}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription}\nBinance_api: {binance_api}\n–û—Å—Ç–∞–ª–æ—Å—å: {timeSub} –¥–Ω–µ–π')

        elif message.text == 'üë£–ù–∞–∑–∞–¥' or message.text == 'üë£Back':
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id,'üë£', reply_markup=nav.eng_mainMenu)


            else:
                await bot.send_message(message.from_user.id,'üë£', reply_markup=nav.mainMenu)


        elif message.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ' or  message.text == '‚ÑπÔ∏èInfo':
            await bot.send_message(message.from_user.id, '‚ÑπÔ∏è')
            nicname = db.get_nickname(message.from_user.id)
            timeSub = db.get_time_sub(message.from_user.id)
            subscription = db.get_subscription(message.from_user.id)
            wallet = db.get_wallet(message.from_user.id)
            if db.get_api_key(message.from_user.id) != None and db.get_secret_key(message.from_user.id) != None:
                binance_api = 'Yes'
            else:
                binance_api = 'No'
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id,
                                       f'User_id: {message.from_user.id}\nNickname: {nicname}\nWallet: {wallet}\nBinance_api: {binance_api}\nYour subscription: {subscription}\nLeft: {timeSub} days\nMain group:https://t.me/ai_binance_trading\nDevelopment support: https://t.me/+VWFxrDjnK59kMTM6')

            else:
                await bot.send_message(message.from_user.id,
                                       f'User_id: {message.from_user.id}\n–ù–∏–∫: {nicname}\n–ö–æ—à–µ–ª–µ–∫: {wallet}\nBinance_api: {binance_api}\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription}\n–û—Å—Ç–∞–ª–æ—Å—å: {timeSub} –¥–Ω–µ–π\n–ì–ª–∞–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞:https://t.me/ai_binance_trading\n–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: https://t.me/ai_trade_rus')

        elif message.text == '‚úçÔ∏è–ü–æ–¥–ø–∏—Å–∫–∞' or  message.text == '‚úçÔ∏èSubscribe':
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id,'‚úç')
                await bot.send_message(message.from_user.id, f'Your subscription: {db.get_subscription(message.from_user.id)}', reply_markup=nav.puyMenu)

            else:
                await bot.send_message(message.from_user.id, '‚úç')
                await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {db.get_subscription(message.from_user.id)}', reply_markup=nav.puyMenu)

            # await bot.send_message(message.from_user.id, '‚úç')
            # await bot.send_message(message.from_user.id,  '*****************************', reply_markup=nav.sub_inlain_Tester)
            # await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞')
            # await bot.send_message(message.from_user.id, '*****************************', reply_markup=nav.sub_inlain_Light)
            # await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç\n–¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞')
            # await bot.send_message(message.from_user.id, '*****************************', reply_markup=nav.sub_inlain_Optimum)
            # await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ Optima\n–¥–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞')
            # await bot.send_message(message.from_user.id, '*****************************', reply_markup=nav.sub_inlain_Premium)
            # await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º\n–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞')
        elif message.text == 'üìàÔ∏è–¢–æ—Ä–≥–æ–≤–ª—è' or  message.text == 'üìàÔ∏èTrading':
            await bot.send_message(message.from_user.id, 'üìàÔ∏è')
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, f'Your subscription {db.get_subscription(message.from_user.id)}\nTo exit to the Main Menu, enter\n/start', reply_markup=nav.eng_tradingMenu)

            else:
                await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {db.get_subscription(message.from_user.id)}\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start', reply_markup=nav.tradingMenu)

        elif message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏' or  message.text == '‚öôÔ∏èSettings':
            await bot.send_message(message.from_user.id, '‚öôÔ∏è')
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, '‚öôÔ∏èSettings', reply_markup=nav.eng_puyRegWallet)
            else:
                await bot.send_message(message.from_user.id, '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=nav.puyRegWallet)

        elif message.text == 'üìù–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' or  message.text == 'üìùRegistration':
            await bot.send_message(message.from_user.id, 'üìù')
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, 'üìùRegistration', reply_markup=nav.eng_registr)

            else:
                await bot.send_message(message.from_user.id, 'üìù–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è,', reply_markup=nav.eng_registr)

            #     await bot.send_message(message.from_user.id, 'Enter wallet USDT Tron (TRC20) ',
            #                            reply_markup=nav.eng_mainMenu)
            # else:
            #     await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ USDT Tron (TRC20) ',
            #                            reply_markup=nav.mainMenu)



        elif message.text == '‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã' or  message.text == '‚öôÔ∏èAdditional commands':
            await bot.send_message(message.from_user.id, 'English language /eng\nRussian language /rus\nMain Menu /start')


        elif message.text == 'ü§ñ–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' or  message.text == 'ü§ñOptions':
            await bot.send_message(message.from_user.id, 'ü§ñ')
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, '*                  RSI                 *',
                                       reply_markup=nav.settingRSI)
            else:
                await bot.send_message(message.from_user.id, '*                  RSI                 *',
                                       reply_markup=nav.settingRSI)


            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, 'Minimum profit 2%', reply_markup=nav.settingProfit)
            else:
                await bot.send_message(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç 2%', reply_markup=nav.settingProfit)
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, '*         Averaging          *',
                                       reply_markup=nav.settingAveraging)
            else:
                await bot.send_message(message.from_user.id, '*         –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ          *', reply_markup=nav.settingAveraging)
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, '*Connection Binance *', reply_markup=nav.settingbinance_traid)
            else:
                await bot.send_message(message.from_user.id, '*–ü–æ–¥–∫–ª—é—á–∏—Ç—å Binance *', reply_markup=nav.settingbinance_traid)




        elif message.text == 'üèÅÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å' or  message.text == 'üèÅÔ∏èStart':
            await bot.send_message(message.from_user.id, 'üèÅÔ∏è')
            if not db.get_start(message.from_user.id):
                if db.get_subscription(message.from_user.id) != 'Light':
                    try:
                        if message.from_user.id == tg_chanel_user:
                            url = 'https://testnet.binancefuture.com'
                        else:
                            url = 'https://api.binance.com'
                        test = balance_binance(db.get_api_key(message.from_user.id), db.get_secret_key(message.from_user.id), url)
                    except:
                        test = 'error'
                    if test == 'error':
                        if db.get_language(message.from_user.id) == 'eng':

                            await bot.send_message(message.from_user.id,
                                                   f'Error connecting to Binance')
                        else:
                            await bot.send_message(message.from_user.id,f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ binance')
                    else:
                        db.set_binance_balance(message.from_user.id, test[0])
                        if db.get_language(message.from_user.id) == 'eng':

                            await bot.send_message(message.from_user.id, f'The trading bot is running!\nParameters:\nRSI: {db.get_rsi(message.from_user.id)}\nmin profit 2%: {db.get_profit_2(message.from_user.id)}\nAveraging: {db.get_averaging(message.from_user.id)}\nConnection Binance: {db.get_binance_traid(message.from_user.id)}\nExchange balance: {balance_binance(db.get_api_key(message.from_user.id), db.get_secret_key(message.from_user.id), url)}')
                        else:
                            await bot.send_message(message.from_user.id, f'–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\nRSI: {db.get_rsi(message.from_user.id)}\nmin profit 2%: {db.get_profit_2(message.from_user.id)}\nAveraging: {db.get_averaging(message.from_user.id)}\nConnection Binance: {db.get_binance_traid(message.from_user.id)}\n–ë–∞–ª–∞–Ω—Å –±–∏—Ä–∂—ã: {balance_binance(db.get_api_key(message.from_user.id), db.get_secret_key(message.from_user.id), url)}')
                        db.set_start(message.from_user.id, True)
                        with open('data.txt') as json_file:
                            data = json.load(json_file)
                            data['user_id'].append(message.from_user.id)

                        with open('data.txt', 'w') as outfile:
                            json.dump(data, outfile)

                else:
                    #db.set_position_balance(message.from_user.id, 0.00000001)
                    set_user_js(message.from_user.id)

                    db.set_start(message.from_user.id, True)
                    if db.get_language(message.from_user.id) == 'eng':
                        await bot.send_message(message.from_user.id, f'Open position: {round(db.get_position_balance(message.from_user.id),3)}BTC\nBalance: {round(db.get_deposit_demo(message.from_user.id),3)} ')
                    else:
                        await bot.send_message(message.from_user.id, f'–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {round(db.get_position_balance(message.from_user.id),3)}BTC\n Balance: {round(db.get_deposit_demo(message.from_user.id),3)}')

            else:
                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'The trading bot is already running! ')
                else:
                    await bot.send_message(message.from_user.id, '–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! ')

        elif message.text == 'üõë–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' or  message.text == 'üõëStop':
            await bot.send_message(message.from_user.id, 'üõë')
            if db.get_start(message.from_user.id):
                if db.get_subscription(message.from_user.id) != 'Light':
                    db.set_start(message.from_user.id, False)

                    with open('data.txt') as json_file:
                        data = json.load(json_file)
                        data['user_id'].remove(message.from_user.id)

                    with open('data.txt', 'w') as outfile:
                        json.dump(data, outfile)


                    #db.set_position_balance(message.from_user.id, 0.0)
                    # db.set_position(message.from_user.id, 'position_1m', 'non')
                    # db.set_position(message.from_user.id, 'position_5m', 'non')
                    # db.set_position(message.from_user.id, 'position_15m','non')
                    # db.set_position(message.from_user.id, 'position_30m', 'non')
                    # db.set_position(message.from_user.id, 'position_1h', 'non')
                    # db.set_position(message.from_user.id, 'position_4h', 'non')

                    if db.get_language(message.from_user.id) == 'eng':
                        await bot.send_message(message.from_user.id, 'Trading Bot stopped! ')
                    else:
                        await bot.send_message(message.from_user.id, '–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ')
                else:
                    Position = db.get_position_balance(message.from_user.id)
                    balance = db.get_deposit_demo(message.from_user.id)
                    if db.get_language(message.from_user.id) == 'eng':
                        await bot.send_message(message.from_user.id, f'Trading Bot stopped!\nBalance: {round(balance, 3)}\nPosition {round(Position, 3)}')
                    else:
                        await bot.send_message(message.from_user.id, f'–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\nBalance: {balance}\nPosition {Position}')
                    # set_position_js(message.from_user.id,'close', True)
                    # time.sleep(10)
                    # db.set_position(message.from_user.id, 'position_1m', 'non')
                    # db.set_position(message.from_user.id, 'position_5m', 'non')
                    # db.set_position(message.from_user.id, 'position_15m','non')
                    # db.set_position(message.from_user.id, 'position_30m', 'non')
                    # db.set_position(message.from_user.id, 'position_1h', 'non')
                    # db.set_position(message.from_user.id, 'position_4h', 'non')
                    del_user_js(message.from_user.id)
                    db.set_start(message.from_user.id, False)

            else:
                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'The trading bot has already been stopped! ')
                else:
                    await bot.send_message(message.from_user.id, '–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É–∂–µ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ')


        else:
            if db.get_signup(message.from_user.id) == 'setnickname':
                if(len(message.text) > 15):
                    if db.get_language(message.from_user.id) == 'eng':
                        await bot.send_message(message.from_user.id, 'Nickname must not exceed 10 characters')
                    else:
                        await bot.send_message(message.from_user.id, '–ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤—ã—à–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤')
                else:
                    db.set_nickname(message.from_user.id, message.text)
                    db.set_signup(message.from_user.id, 'no_wallet')
                    if db.get_language(message.from_user.id) == 'eng':
                        await bot.send_message(message.from_user.id, 'Nickname registered',  reply_markup=nav.eng_mainMenu)
                    else:
                        await bot.send_message(message.from_user.id, '–ù–∏–∫–Ω–µ–π–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!',  reply_markup=nav.mainMenu)
            elif db.get_signup(message.from_user.id) == 'wallet_reg':
                db.set_wallet(message.from_user.id, message.text)
                db.set_signup(message.from_user.id, 'Done')
                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'Wallet registration successful', reply_markup=nav.eng_mainMenu)
                else:
                    await bot.send_message(message.from_user.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainMenu)

            elif db.get_signup(message.from_user.id) == 'key_reg':
                db.set_api_key(message.from_user.id, message.text)
                db.set_signup(message.from_user.id, 'secret_key_reg')

                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'API Key successfully saved')
                    await bot.send_message(message.from_user.id, 'Enter Secret Key')
                else:
                    await bot.send_message(message.from_user.id, 'API Key —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω')
                    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ Secret Key:')
            elif db.get_signup(message.from_user.id) == 'secret_key_reg':
                db.set_secret_key(message.from_user.id, message.text)
                db.set_signup(message.from_user.id, 'Done')
                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'Secret Key successfully saved', reply_markup=nav.eng_mainMenu)

                else:
                    await bot.send_message(message.from_user.id, 'Secret Key —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω', reply_markup=nav.mainMenu)


            else:
                if db.get_language(message.from_user.id) == 'eng':
                    await bot.send_message(message.from_user.id, 'What is this?')
                else:
                    await bot.send_message(message.from_user.id, '–ß—Ç–æ —ç—Ç–æ?')
# @dp.message_handler()
# async def start_traid(message: types.Message):
#     elif message.text == 'üèÅÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å':
#         await bot.send_message(message.from_user.id, '–ó–∞–ø—É—Å–∫')
#         tr = Traid(10,dp,bot)
#     elif message.text == 'üõë–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å':
#         pass
#     elif message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
#         pass
@dp.callback_query_handler(text='Tester_sub')
async def Tester_sub(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Tester subscription\nall features available\nwith wallet connection Binance',reply_markup=nav.sub_inlain_Tester)
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞ Binance', reply_markup=nav.sub_inlain_Tester)

@dp.callback_query_handler(text='Light_sub')
async def Light_sub(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Subscription Light\nDemo account available\nWithout connecting a wallet Binance', reply_markup=nav.sub_inlain_Light)
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –õ–∞–π—Ç\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–µ–º–æ-—Å—á—ë—Ç\n–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ Binance', reply_markup=nav.sub_inlain_Light)
@dp.callback_query_handler(text='Optimum_sub')
async def Optimum_sub(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Subscription not available, testing in progress')
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏–¥—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
@dp.callback_query_handler(text='Premium_sub')
async def Premium_sub(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Subscription not available, testing in progress')
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏–¥—ë—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
@dp.callback_query_handler(text='Tester_sub')
async def Tester_sub(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Tester subscription\nall features available\nwith wallet connection Binance')
    else:
        await bot.send_message(message.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞\n–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞ Binance', reply_markup=nav.sub_inlain_Premium)

@dp.callback_query_handler(text='Tester')
async def Tester(message: types.Message):
    subscription = db.get_subscription(message.from_user.id)
    if subscription == 'Tester':
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, f'You already have a subscription {subscription}')
        else:
            await bot.send_message(message.from_user.id, f'–£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription}')
    else:
        col_tester = db.get_oll_subscription('Tester')
        if len(col_tester) >= 10:
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, f'Maximum limit of testers exceeded\n')
            else:
                await bot.send_message(message.from_user.id, f'–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤\n')
        else:
            db.set_subscription(message.from_user.id, 'Tester')
            if db.get_language(message.from_user.id) == 'eng':
                await bot.send_message(message.from_user.id, f'Your subscription has been changed to Tester')
            else:
                await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Tester')
                del_user_js(message.from_user.id)

@dp.callback_query_handler(text='Light')
async def Light(message: types.Message):
    subscription = db.get_subscription(message.from_user.id)

    if subscription == 'Light':
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, f'You already have a subscription {subscription}')
        else:
            await bot.send_message(message.from_user.id, f'–£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription}')
    

    else:
        db.set_subscription(message.from_user.id, 'Light')
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, f'Your subscription has been changed to Light')
        else:
            await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Light')


@dp.callback_query_handler(text='Optimum')
async def Optimum(message: types.Message):
    subscription = db.get_subscription(message.from_user.id)
    if subscription == 'Optimum':
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, f'You already have a subscription {subscription}')
        else:
           await bot.send_message(message.from_user.id, f'–£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription}')
    elif db.get_wallet(message.from_user.id) == None:
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, 'Register your wallet for payment', reply_markup=nav.eng_puyRegWallet)
        else:
            await bot.send_message(message.from_user.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=nav.puyRegWallet)
    else:
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id,
                                   f'To connect a subscription for 1 month Optimum\nMake a payment to a cryptocurrency wallet\n5 USDT\nAfter payment, click paid, after confirming the transaction, the package will be connected.\nUSDT Tron Wallet (TRC20)')
        else:
            await bot.send_message(message.from_user.id,
                               f'–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü Optimum\n–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n10 USDT\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –æ–ø–ª–∞—Ç–∏–ª, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω.\n–ö–æ—à–µ–ª–µ–∫ USDT Tron (TRC20)')
        await bot.send_message(message.from_user.id, '\nTSphipuArumtab7EnVHYspUD3bxyLBtaAq', reply_markup=nav.puyMenu_optimum)


@dp.callback_query_handler(text='Premium')
async def Premium(message: types.Message):
    subscription = db.get_subscription(message.from_user.id)
    if subscription == 'Premium':
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, f'You already have a subscription {subscription}')
        else:
            await bot.send_message(message.from_user.id, f'–£ –≤–∞—Å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription}')
    elif db.get_wallet(message.from_user.id) == None:
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id, 'Register your wallet for payment', reply_markup=nav.eng_puyRegWallet)
        else:
            await bot.send_message(message.from_user.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=nav.puyRegWallet)
    else:
        if db.get_language(message.from_user.id) == 'eng':
            await bot.send_message(message.from_user.id,
                                   f'To connect a subscription for 1 month Premium\nMake a payment to a cryptocurrency wallet\n5 USDT\nAfter payment, click paid, after confirming the transaction, the package will be connected.\nUSDT Tron Wallet (TRC20)')
        else:
            await bot.send_message(message.from_user.id,
                               f'–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü Premium\n–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n50 USDT\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –æ–ø–ª–∞—Ç–∏–ª, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω.\n–ö–æ—à–µ–ª–µ–∫ USDT Tron (TRC20)')
        await bot.send_message(message.from_user.id, '\nTSphipuArumtab7EnVHYspUD3bxyLBtaAq', reply_markup=nav.puyMenu_premium)

@dp.callback_query_handler(text='PuyOk_premium')
async def PuyOk_premium(message: types.Message):
    db.set_payment(message.from_user.id, 'yes')
    db.set_subscription(message.from_user.id, 'Premium')
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Your subscription has been changed to Premium')
    else:
        await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Premium')





@dp.callback_query_handler(text='PuyOk_optimum')
async def PuyOk_optimum(message: types.Message):
    db.set_payment(message.from_user.id, 'yes')
    db.set_subscription(message.from_user.id, 'Optimum')
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Your subscription has been changed to Premium')
    else:
        await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Optimum')

@dp.callback_query_handler(text='PuyClose_lait_optimum')
async def PuyClose__optimum(message: types.Message):
    db.set_payment(message.from_user.id, 'no')

@dp.callback_query_handler(text='PuyOk_lait')
async def PuyOk_lait(message: types.Message):
    db.set_payment(message.from_user.id, 'yes')
    db.set_subscription(message.from_user.id, 'Light')
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Your subscription has been changed to Light')
    else:
        await bot.send_message(message.from_user.id, f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ Light')

@dp.callback_query_handler(text='minprofitYes')
async def minprofitYes_callb(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_profit_2(callback.from_user.id, 'ON')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Min profit 2% - ON')
        else:
            await callback.answer('Min profit 2% - ON')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

@dp.callback_query_handler(text='minprofitNo')
async def minprofitNo_callb(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_profit_2(callback.from_user.id, 'OFF')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Min profit 2% - OFF')
        else:
            await callback.answer('Min profit 2% - OFF')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

#********************
@dp.callback_query_handler(text='RsiYes')
async def RsiYes(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_rsi(callback.from_user.id, 'ON')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('RSI - ON')
        else:
            await callback.answer('RSI - ON')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

@dp.callback_query_handler(text='RsiNo')
async def RsiNo(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_rsi(callback.from_user.id, 'OFF')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('RSI - OFF')
        else:
            await callback.answer('RSI- OFF')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

#********************
@dp.callback_query_handler(text='binance_traidYes')
async def binance_traidYes(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_binance_traid(callback.from_user.id, 'ON')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Connection Binance - ON')
        else:
            await callback.answer('Connection Binance - ON')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

@dp.callback_query_handler(text='binance_traidNo')
async def binance_traidNo(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_binance_traid(callback.from_user.id, 'OFF')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Connection Binance - OFF')
        else:
            await callback.answer('Connection Binance- OFF')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

#********************
@dp.callback_query_handler(text='averagingYes')
async def averagingYes(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_averaging(callback.from_user.id, 'ON')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Averaging - ON')
        else:
            await callback.answer('Averaging - ON')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

@dp.callback_query_handler(text='binance_traidNo')
async def binance_traidNo(callback: types.CallbackQuery):
    subscription =db.get_subscription(callback.from_user.id)
    if subscription == 'Tester' or subscription == 'Premium':
        db.set_averaging(callback.from_user.id, 'OFF')
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Averaging - OFF')
        else:
            await callback.answer('Averaging- OFF')
    else:
        if db.get_language(callback.from_user.id) == 'eng':
            await callback.answer('Premium subscription required')
        else:
            await callback.answer('–ù—É–∂–µ–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞')

@dp.callback_query_handler(text='reg_wallet')
async def PuyClose_lait_premium(message: types.Message):
    db.set_signup(message.from_user.id, 'wallet_reg')
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Enter your wallet:')
    else:
        await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª—ë–∫:')

@dp.callback_query_handler(text='reg_api')
async def PuyClose_lait_premium(message: types.Message):
    db.set_signup(message.from_user.id, 'key_reg')
    media = types.MediaGroup()
    media.attach_photo(types.InputFile('image/1.png', 'Reg_API'))
    media.attach_photo(types.InputFile('image/2.png', 'Reg_API'))
    media.attach_photo(types.InputFile('image/3.png', 'Reg_API'))
    media.attach_photo(types.InputFile('image/4.png', 'Reg_API'))
    #media = [types.InputMediaPhoto('image/1.png', 'Reg_API'), types.InputMediaPhoto('image/1.png'), types.InputMediaPhoto('image/1.png'), types.InputMediaPhoto('image/1.png')]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –≥–¥–µ —Ñ–æ—Ç–æ –∏ –∫–∞–∫ –µ—ë –ø–æ–¥–ø–∏—Å–∞—Ç—å

    await bot.send_media_group(message.from_user.id, media=media)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ

    #await bot.send_photo(message.from_user.id, photo)
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, f'Enter API Key:')
    else:
        await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ API Key:')

@dp.callback_query_handler(text='reg_nickname')
async def PuyClose_lait_premium(message: types.Message):
    db.set_signup(message.from_user.id, 'setnickname')
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id, 'Enter your nickname:')
    else:
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫:')


@dp.message_handler()
async def bot_masege_user_error(message: types.Message):
    if db.get_language(message.from_user.id) == 'eng':
        await bot.send_message(message.from_user.id,
                               f'    Access tothebot is openonlyfor testers',
                               reply_markup=nav.eng_tradingMenu)

    else:
        await bot.send_message(message.from_user.id,
                               f'–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤',
                               reply_markup=nav.tradingMenu)
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates= True)